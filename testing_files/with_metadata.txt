rules:
  - id: duplicate-id
    message: >-
      The 'id' field $X was used multiple times.
      The 'id' field needs to be unique.
    severity: ERROR
    languages: [yaml]
    patterns:
      - pattern-inside: "rules: [..., $RULE, ...]"
      # nosemgrep: yaml.semgrep.slow-pattern-top-ellipsis
      - pattern-inside: |
          ...
          - id: $X
            ...
          ...
          - id: $X
            ...
          ...
      - pattern: |
          id: $X
    metadata:
      category: correctness
      technology:
        - semgrep
rules:
  - id: duplicate-pattern
    message: >-
      Two identical pattern clauses were detected.
      This will cause Semgrep to run the same pattern twice.
      Remove one of the duplicate pattern clauses.
    severity: ERROR
    languages: [yaml]
    patterns:
      - pattern-inside: "rules: [..., $RULE, ...]"
      - pattern-inside: |
          - pattern: $X
          ...
          - pattern: $X
          ...
      - pattern: |
          pattern: $X
    metadata:
      category: correctness
      technology:
        - semgrep
rules:
  - id: empty-message
    message: >-
      This rule has an empty message field.
      Consider adding a message field that communicates why this
      rule is an issue and how to fix it. This will increase the
      chance that the finding gets addressed.
    languages: [yaml]
    patterns:
      - pattern-inside: "rules: [..., $RULE, ...]"
      - pattern: |
          message: ""
    severity: WARNING
    metadata:
      category: correctness
      technology:
        - semgrep
rules:
  - id: message-whitespace-check
    message: >-
      It looks like you have an additional space in your rule message, this
      can look awkward in the finding output, please remove the additional
      whitespace!
    languages:
      - yaml
    severity: WARNING
    metadata:
      references:
        - https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository
      category: correctness
      technology:
        - semgrep
    patterns:
      - pattern-inside: |
          rules: ...
      - pattern: |
          message: >-
            $VALUE
      - focus-metavariable:
          - $VALUE
      - pattern-regex: \w.*
      - pattern-regex: \s{2,}
    fix-regex:
      regex: (?<=\S)\s(\s{1,})
      replacement: " "
rules:
  # ruleid: metadata-category
  - id: unchecked-subprocess-call
    patterns:
      - pattern-either:
          - pattern: |
              subprocess.call(...)
          - pattern: |
              subprocess.call(...)
      - pattern-not-inside: |
          $S = subprocess.call(...)
      - pattern-not-inside: |
          subprocess.call(...) == $X
    message: >-
      bad stuff
    severity: WARNING
    fix: subprocess.check_call(...)
  # ok: metadata-category
  - id: subprocess-run
    patterns: subprocess.run(...)
    message: >-
      bad stuff
    severity: WARNING
    fix: subprocess.check_call(...)
    metadata:
      category: python
  - metadata:
      category: python
    # ok: metadata-category
    id: subprocess-run-2
    patterns: subprocess.run(...)
    message: >-
      bad stuff
    severity: WARNING
    fix: subprocess.check_call(...)
rules:
  - id: metadata-category
    message: >-
      This Semgrep rule is missing a valid 'category' field in the 'metadata'.
      'category' must be one of 'security', 'correctness', 'best-practice',
      'performance', 'maintainability', or 'portability'.
    severity: INFO
    patterns:
      - pattern-inside: "rules: [..., $RULE, ...]"
      - pattern: "id: $RULEID"
      - pattern-not-inside: |
          - ...
            metadata:
              ...
              category: $CATEGORY
    languages: [yaml]
    metadata:
      category: best-practice
      technology:
        - semgrep
rules:
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      likelihood: lOW
      # ruleid: metadata-confidence-incorrect-value
      confidence: lOW
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      # ok: metadata-confidence-incorrect-value
      confidence: LOW
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
rules:
  - id: metadata-confidence-incorrect-value
    patterns:
      - pattern-inside: |
          rules: 
            ...
      - pattern-inside: |
          metadata: 
            ...
            category: security
            ...
      - pattern: |
          confidence: $VALUE
      - pattern-not: |
          confidence: LOW
      - pattern-not: |
          confidence: MEDIUM
      - pattern-not: |
          confidence: HIGH
    message: >-
      Semgrep rule confidence: $VALUE detected, but the value must be LOW,
      MEDIUM, or HIGH. For more information visit: 
      https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
    languages:
      - yaml
    severity: WARNING
    metadata:
      references:
        - https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
      category: correctness
      technology:
        - semgreprules:
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    # ok: metadata-confidence
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      likelihood: LOW
      impact: LOW
      confidence: LOW
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    # ruleid: metadata-confidence
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
rules:
  - id: metadata-confidence
    patterns:
      - pattern-inside: |
          rules: 
            ...
      - pattern-inside: |
          metadata: 
            ...
            category: security
            ...
      - pattern-not-inside: |
          metadata: 
            ...
            confidence: $VALUE
    message: >-
      This Semgrep rule is missing a valid 'confidence' field in the 'metadata'.
      which should be either LOW, MEDIUM, or HIGH. For more information visit 
      https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
    languages:
      - yaml
    severity: WARNING
    metadata:
      references:
        - https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository
      category: correctness
      technology:
        - semgreprules:
  - id: example-1
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ok: metadata-cwe
      cwe: "CWE-123: Some Vulnerability"
  - id: example-2
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ruleid: metadata-cwe
      cwe: "CWE123: Some Vulnerability"
  - id: example-3
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ruleid: metadata-cwe
      cwe: "cwe-123: Some Vulnerability"
  - id: example-4
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ruleid: metadata-cwe
      cwe: CWE-123
  - id: example-4
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ok: metadata-cwe
      cwe: >
        CWE-123: Some Vulnerability
rules:
  - id: metadata-cwe
    message: >-
      $...CWE The cwe tag in rule metadata should always be in the format "CWE-000: Title".
    severity: ERROR
    languages: [yaml]
    patterns:
      - pattern-inside: "rules: ..."
      - pattern-inside: "metadata: ..."
      - pattern: "cwe: ..."
      - pattern-not-regex: CWE-[\d]+:\s+\w
    metadata:
      category: best-practice
      technology:
        - semgrep
rules:
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    metadata:
      owasp: 
        - "A03:2021 - Injection"
      # ruleid: metadata-deepsemgrep
      deepsemgrep: true
      cwe: 
        - "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      likelihood: HIGH
      impact: HIGH
      confidence: HIGH
      subcategory: 
        - vuln
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    metadata:
      owasp: 
        - "A03:2021 - Injection"
      # ruleid: metadata-deepsemgrep
      deepsemgrep: true
      cwe: 
        - "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      likelihood: HIGH
      impact: HIGH
      confidence: HIGH
      subcategory: 
        - vuln
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
rules:
  - id: metadata-deepsemgrep
    patterns:
      - pattern-inside: |
          rules: 
            ...
      - pattern-inside: |
          metadata: 
            ...
            $DEEPSEMGREP: true
            ...
      - focus-metavariable: $DEEPSEMGREP
      - metavariable-regex: 
          metavariable: $DEEPSEMGREP
          regex: ^(deepsemgrep)$
    message: >-
      We no longer support `deepsemgrep: true`, please use `interfile:true`
    fix-regex:
      regex: deepsemgrep
      replacement: interfile
    languages:
      - yaml
    severity: WARNING
    metadata:
      category: correctness
      technology:
        - semgrep
      references:
        - https://semgrep.dev/rules:
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      likelihood: lOW
      # ruleid: metadata-impact-incorrect-value
      impact: lOW
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      # ok: metadata-impact-incorrect-value
      impact: LOW
      likelihood: LOW
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
rules:
  - id: metadata-impact-incorrect-value
    patterns:
      - pattern-inside: |
          rules: 
            ...
      - pattern-inside: |
          metadata: 
            ...
            category: security
            ...
      - pattern: |
          impact: $VALUE
      - pattern-not: |
          impact: LOW
      - pattern-not: |
          impact: MEDIUM
      - pattern-not: |
          impact: HIGH
    message: >-
      Semgrep rule impact: $VALUE detected, but the value must be LOW,
      MEDIUM, or HIGH. For more information visit: 
      https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
    languages:
      - yaml
    severity: WARNING
    metadata:
      references:
        - https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
      category: correctness
      technology:
        - semgreprules:
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    # ok: metadata-impact
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      likelihood: LOW
      impact: LOW
      confidence: LOW
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    # ruleid: metadata-impact
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
rules:
  - id: metadata-impact
    patterns:
      - pattern-inside: |
          rules: 
            ...
      - pattern-inside: |
          metadata: 
            ...
            category: security
            ...
      - pattern-not-inside: |
          metadata: 
            ...
            impact: $VALUE
    message: >-
      This Semgrep rule is missing a valid 'impact' field in the 'metadata'.
      which should be either LOW, MEDIUM, or HIGH. For more information visit 
      https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
    languages:
      - yaml
    severity: WARNING
    metadata:
      references:
        - https://semgrep.dev/docs/writing-rules/rule-syntax/#TODO
      category: correctness
      technology:
        - semgreprules:
  - id: id-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      # ruleid: metadata-likelihood-incorrect-value
      likelihood: lOW
      impact: LOW
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
  - id: ok-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      # ok: metadata-likelihood-incorrect-value
      likelihood: LOW
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
rules:
  - id: metadata-likelihood-incorrect-value
    patterns:
      - pattern-inside: |
          rules: 
            ...
      - pattern-inside: |
          metadata: 
            ...
            category: security
            ...
      - pattern: |
          likelihood: $VALUE
      - pattern-not: |
          likelihood: LOW
      - pattern-not: |
          likelihood: MEDIUM
      - pattern-not: |
          likelihood: HIGH
    message: >-
      Semgrep rule likelihood: $VALUE detected, but the value must be LOW,
      MEDIUM, or HIGH. For more information visit: 
      https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
    languages:
      - yaml
    severity: WARNING
    metadata:
      references:
        - https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
      category: correctness
      technology:
        - semgreprules:
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    # ok: metadata-likelihood
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      likelihood: LOW
      impact: LOW
      confidence: LOW
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    # ruleid: metadata-likelihood
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
rules:
  - id: metadata-likelihood
    patterns:
      - pattern-inside: |
          rules: 
            ...
      - pattern-inside: |
          metadata: 
            ...
            category: security
            ...
      - pattern-not-inside: |
          metadata: 
            ...
            likelihood: $VALUE
    message: >-
      This Semgrep rule is missing a valid 'likelihood' field in the 'metadata'.
      which should be either LOW, MEDIUM, or HIGH. For more information visit 
      https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
    languages:
      - yaml
    severity: WARNING
    metadata:
      references:
        - https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
      category: correctness
      technology:
        - semgreprules:
  - id: example-1
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ok: metadata-owasp
      owasp: "A1: Some Vulnerability"
  - id: example-2
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ruleid: metadata-owasp
      owasp: "A11: Some Vulnerability"
  - id: example-3
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ruleid: metadata-owasp
      owasp: a4
  - id: example-4
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ruleid: metadata-owasp
      owasp: A5 Some Vulnerability
  - id: example-5
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ok: metadata-owasp
      owasp:
        # ok: metadata-owasp
        - A05:2021 - Security Misconfiguration
        # ok: metadata-owasp
        - A06:2017 - Security Misconfiguration
  - id: example-6
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ok: metadata-owasp
      owasp:
        # ruleid: metadata-owasp
        - A5:2021 - Security Misconfiguration
        # ruleid: metadata-owasp
        - A06:201789 - Security Misconfiguration
rules:
  - id: metadata-owasp
    message: >-
      The `owasp` tag in Semgrep rule metadata should start with the format "A00:YYYY",
      where A00 is the OWASP top ten number and YYYY is the OWASP top ten year.
    severity: ERROR
    languages: [json, yaml]
    patterns:
      - pattern-inside: "rules: ..."
      - pattern-inside: "metadata: ..."
      - pattern-either:
          - patterns:
              - pattern: 'owasp: "..."'
              - pattern-not: 'owasp: "=~/^A(0?[1-9]|10): .+$/"'
          - patterns:
              - pattern-inside: "owasp: [...]"
              - pattern: '"$ANYTHING"'
              - pattern-not-regex: .*A[01][0-9]:[0-9]{4}\s+.*
              - pattern-not-regex: "owasp:"
    metadata:
      category: best-practice
      technology:
        - semgrep
rules:
  - id: example-1
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ok: metadata-references
      references:
        - https://google.com
  - id: example-2
    message: Example
    severity: ERROR
    languages: [json, yaml]
    pattern: "..."
    metadata:
      # ruleid: metadata-references
      references: https://google.com
rules:
  - id: metadata-references
    message: >-
      The references in rule metadata should always be a list, even if there's only one.
    severity: ERROR
    languages: [json, yaml]
    patterns:
      - pattern-inside: |
          rules: ...
      - pattern-inside: |
          metadata: ...
      - pattern: |
          references: ...
      - pattern-not: |
          references: [...]
    metadata:
      category: correctness
      technology:
        - semgrep
rules:
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    # ok: metadata-subcategory-incorrect-value
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      likelihood: LOW
      impact: LOW
      confidence: LOW
      subcategory: 
        - audit
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      # ruleid: metadata-subcategory-incorrect-value
      subcategory: 
        - potato
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
rules:
  - id: metadata-subcategory-incorrect-value
    patterns:
      - pattern-inside: |
          rules: 
            ...
      - pattern-inside: |
          metadata: 
            ...
            category: security
            ...
      - pattern: |
          subcategory: 
            - $VALUE
      - pattern-not: |
          subcategory: 
            - vuln
      - pattern-not: |
          subcategory: 
            - audit
      - pattern-not: |
          subcategory: 
            - guardrail
    message: >-
      Semgrep rule likelihood: $VALUE detected, but the value must be vuln,
      audit, or guardrail. For more information visit:
      https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
    languages:
      - yaml
    severity: WARNING
    metadata:
      references:
        - https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
      category: correctness
      technology:
        - semgreprules:
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    # ok: metadata-subcategory
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      likelihood: LOW
      impact: LOW
      confidence: LOW
      subcategory: 
        - audit
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
  - id: require-request
    message: >-
      If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
    severity: LOW
    languages: [javascript, typescript]
    # ruleid: metadata-subcategory
    metadata:
      owasp: "A03:2021 - Injection"
      cwe: "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    patterns: 
rules:
  - id: metadata-subcategory
    patterns:
      - pattern-inside: |
          rules: 
            ...
      - pattern-inside: |
          metadata: 
            ...
            category: security
            ...
      - pattern-not-inside: |
          metadata: 
            ...
            subcategory: $VALUE
    message: >-
      This Semgrep rule is missing a valid 'subcategory' field in the 'metadata'.
      which should be either audit, vuln, or guardrail. For more information visit 
      https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
    languages:
      - yaml
    severity: WARNING
    metadata:
      references:
        - https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/
      category: correctness
      technology:
        - semgreprules:
  # ruleid: metadata-technology
  - id: unchecked-subprocess-call
    patterns:
      - pattern-either:
          - pattern: |
              subprocess.call(...)
          - pattern: |
              subprocess.call(...)
      - pattern-not-inside: |
          $S = subprocess.call(...)
      - pattern-not-inside: |
          subprocess.call(...) == $X
    message: >-
      bad stuff
    severity: WARNING
    fix: subprocess.check_call(...)
    metadata:
      category: best-practice
  # ok: metadata-technology
  - id: subprocess-run
    patterns: subprocess.run(...)
    message: >-
      bad stuff
    severity: WARNING
    fix: subprocess.check_call(...)
    metadata:
      category: python
      technology:
        - semgrep
  # ok: metadata-technology
  - metadata:
      category: python
      technology:
        - semgrep
    id: subprocess-run-2
    patterns: subprocess.run(...)
    message: >-
      bad stuff
    severity: WARNING
    fix: subprocess.check_call(...)
rules:
  - id: metadata-technology
    message: >-
      This Semgrep rule is missing a 'technology' field in the 'metadata'.
      Consider adding a list of technologies based on the rule's associated
      library or framework, or another piece of relevant information.
    severity: INFO
    patterns:
      - pattern-inside: "rules: [..., $RULE, ...]"
      - pattern: |
          id: ...
          ...
      - pattern-not: |
          id: ...
          ...
          metadata:
            ...
            technology:
              - ...
    languages: [yaml]
    metadata:
      category: best-practice
      technology:
        - semgrep
rules:
  - id: missing-language-field
    message: >-
      Please include a 'languages' field for your rule $RULEID!
    languages: [yaml]
    pattern-either:
      # non join mode
      - patterns:
          - pattern-inside: "rules: [..., $RULE, ...]"
          - pattern: "id: $RULEID"
          - pattern-not-inside: |
              - ...
                languages: ...
          - pattern-not-inside: |
              - ...
                mode: join
      # join mode
      - patterns:
          - pattern-inside: |
              rules: [ ..., $OUTER_RULE, ...]
          - pattern-inside: $OUTER_RULE
          - pattern-inside: |
              id: $OUTER_RULEID
              mode: join
              join:
                rules: [ ..., $INNER_RULE, ...]
                ...
              ...
          - pattern-inside: $INNER_RULE
          - pattern-not-inside: |
              - languages: ...
                ...
          - pattern: |
              id: $RULEID
    severity: WARNING
    metadata:
      references:
        - https://semgrep.dev/docs/writing-rules/rule-syntax/#required
      category: correctness
      technology:
        - semgrep
rules:
  - id: missing-message-field
    message: >-
      This rule does not have a message. Semgrep requires that
      rules have a message. Include a message to explain what the rule does.
      Consider writing a message that explains why this is an issue and
      how to fix it.
    languages: [yaml]
    patterns:
      - pattern-inside: "rules: [..., $RULE, ...]"
      - pattern: "id: $RULEID"
      - pattern-not-inside: |
          - ...
            message: ...
      - pattern-not-inside: |
          - ...
            mode: extract
    severity: WARNING
    metadata:
      category: correctness
      technology:
        - semgrep
      references:
      - https://semgrep.dev/docs/writing-rules/rule-syntax/rules:
  - id: multi-line-message
    message: >-
      This rule has a multi-line message field, which may display poorly
      in a terminal. Consider ensuring it is on one line. For example,
      use `message: >-`, not `message: |`.
    languages: [yaml]
    patterns:
      - pattern-inside: "rules: [..., $RULE, ...]"
      - pattern: |
          message: "=~/[\\n\\r]/"
    severity: WARNING
    metadata:
      category: correctness
      technology:
        - semgrep
      references:
        - https://github.com/returntocorp/semgrep-rules/issues/1431
rules:
  - id: missing-deconstructed-value
    message: >-
      Looks like this value is deconstructing a const/var/let you need to use
      all three `const {...} =` `var {...} =` and `let {...} =` to provide
      accurate coverage consider adding the missing patterns in a
      `pattern-inside` for better coverage.
    languages:
      - yaml
    severity: WARNING
    metadata:
      references:
        - https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository
      category: correctness
      technology:
        - semgrep
    patterns:
      - pattern-either:
          - patterns:
              - pattern-inside: |
                  rules: ...
              - pattern-not-inside: |
                  - pattern-either:
                      ...
              - pattern: |
                  - pattern-inside:
                      $VALUE
              - pattern-either:
                  - pattern-regex: const {.*}.*=
                  - pattern-regex: let {.*}.*=
                  - pattern-regex: var {.*}.*=
          - patterns:
              - patterns:
                  - pattern-inside: |
                      rules: ...
                  - pattern-inside: |
                      - pattern-either:
                          $VALUE
                  - focus-metavariable:
                      - $VALUE
                  - pattern-inside: |
                      - pattern-inside: 
                          $A
                  - metavariable-regex:
                      metavariable: $A
                      regex: .*\s.*(var|const|let)\s{.*}\s=
              - pattern-not:
                  patterns:
                    - pattern-inside: |
                        ...
                        - pattern-inside: 
                            $Z
                        ...
                        - pattern-inside: 
                            $B
                        ...            
                        - pattern-inside: 
                            $C
                        ...
                    - metavariable-regex:
                        metavariable: $Z
                        regex: .*\s.*(var|const|let).*{.*}
                    - metavariable-regex:
                        metavariable: $B
                        regex: .*\s.*(var|const|let).*{.*}
                    - metavariable-regex:
                        metavariable: $C
                        regex: .*\s.*(var|const|let).*{.*}
rules:
  - id: express-sandbox-code-injection
    message: >-
      Make sure that unverified user data can not reach `sandbox`.
    severity: ERROR
    languages: [javascript]
    metadata:
      owasp: "A01:2017 - Injection"
      cwe: "CWE-94: Improper Control of Generation of Code ('Code Injection')"
    patterns:
      - pattern-either:
          - pattern-inside: |
              # ruleid: slow-pattern-general-func
              function ($REQ, $RES, ...) {
                  ...
              }
          # ruleid: slow-pattern-general-func
          - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
          # ruleid: slow-pattern-general-func
          - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
      - pattern-either:
          - pattern: |
              $S = new $SANDBOX(...);
              ...
              $S.run(<... $REQ.$QUERY.$FOO ...>,...);
rules:
  - id: slow-pattern-general-func
    languages:
      - yaml
    message: >-
      Using patterns like `function (...) {...}` is too general it will probably slow down the rule performance.
    patterns:
      - pattern-either:
          - pattern-inside: |
              pattern-inside: $X
          - pattern-inside: |
              pattern-not-inside: $X
          - pattern-inside: |
              pattern: $X
          - pattern-inside: |
              pattern-not: $X
      - pattern-regex: function[^{]*{[\s\n]*\.\.\.[\s\n]*}
      - pattern-either:
          - pattern-inside: |
              languages: [...,"javascript",...]
              ...
          - pattern-inside: |
              languages: [...,"typescript",...]
              ...
    severity: WARNING
    metadata:
      category: performance
      technology:
        - semgrep
rules:
  - id: express-sandbox-code-injection
    message: >-
      Make sure that unverified user data can not reach `sandbox`.
    severity: ERROR
    languages: [javascript]
    metadata:
      owasp: "A01:2017 - Injection"
      cwe: "CWE-94: Improper Control of Generation of Code ('Code Injection')"
    patterns:
      - pattern-inside: |
          ...
          $SANDBOX = require('sandbox');
          ...
      - pattern-either:
          # ok: slow-pattern-general-property
          - pattern-inside: function ($REQ, $RES, ...) {...}
          # ok: slow-pattern-general-property
          - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
          # ok: slow-pattern-general-property
          - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
          # ok: slow-pattern-general-property
          - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
          # ruleid: slow-pattern-general-property
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
      - pattern-either:
          # ruleid: slow-pattern-general-property
          - pattern: $S.run(<... $REQ.$QUERY.$FOO ...>,...);
rules:
  - id: slow-pattern-general-property
    languages:
      - yaml
    message: >-
      Using patterns like `$X.$Y` may be too general and may slow down the rule performance.
    patterns:
      - pattern-either:
          - pattern-inside: |
              pattern-inside: $X
          - pattern-inside: |
              pattern-not-inside: $X
          - pattern-inside: |
              pattern: $X
          - pattern-inside: |
              pattern-not: $X
      - pattern-regex: \$[A-Z]*\.\$[A-Z]*
    severity: WARNING
    metadata:
      category: performance
      technology:
        - semgrep
rules:
  - id: typescript.react.best-practice.react-props-in-state.react-props-in-state
    pattern-either:
      - patterns:
          # ok: slow-pattern-single-metavariable
          - pattern-inside: |
              class $CN extends React.Component {
                ...
              }
          - pattern-either:
              # ok: slow-pattern-single-metavariable
              - pattern: |
                  state = {$NAME: <... this.props.$PROP ...>}
              # ok: slow-pattern-single-metavariable
              - pattern: |
                  this.state = {$NAME: <... this.props.$PROP ...>}
      - patterns:
          # ok: slow-pattern-single-metavariable
          - pattern-inside: |
              function $FN({$PROP},...) {
                ...
              }
          # ok: slow-pattern-single-metavariable
          - pattern-inside: useState(...)
          # ruleid: slow-pattern-single-metavariable
          - pattern: $PROP
      - patterns:
          # ok: slow-pattern-single-metavariable
          - pattern-inside: |
              function $FN($PROP,...) {
                ...
              }
          # ok: slow-pattern-single-metavariable
          - pattern-inside: useState(...)
          # ruleid: slow-pattern-single-metavariable
          - pattern-not: $PROP
    message: >-
      It is a bad practice to stop the data flow in rendering by copying props into state.
    metadata:
      references:
        - https://overreacted.io/writing-resilient-components/#principle-1-dont-stop-the-data-flow
    languages:
      - typescript
      - javascript
    severity: WARNING
rules:
  - id: slow-pattern-single-metavariable
    languages:
      - yaml
    message: >-
      Using a single metavariable as a pattern drastically slows down the rule performance
      because it will match every expression in a file. Instead, try to match something
      specific such as a function name, or anchor on a statement that may occur above
      or below the pattern. The more specific you can be, the faster the pattern will run.
    patterns:
      - pattern-either:
          - pattern-inside: |
              pattern-inside: $PATTERN
          - pattern-inside: |
              pattern-not-inside: $PATTERN
          - pattern-inside: |
              pattern: $PATTERN
          - pattern-inside: |
              pattern-not: $PATTERN
      - metavariable-regex:
          metavariable: $PATTERN
          regex: \$[A-Z_]*
    severity: WARNING
    metadata:
      category: performance
      technology:
        - semgrep
rules:
  - id: slow-pattern-top-ellipsis
    languages:
      - yaml
    message: >-
      Using the ellipsis operator `...` at the top of the pattern drastically slows down the rule performance.
    patterns:
      - pattern-either:
          - pattern-inside: |
              pattern-inside: $X
          - pattern-inside: |
              pattern-not-inside: $X
          - pattern-inside: |
              pattern: $X
          - pattern-inside: |
              pattern-not: $X
      - pattern-regex: \|\s*\n\s*\.\.\.\s*\n[^\n]*\n\s*\.\.\.
    severity: WARNING
    metadata:
      category: performance
      technology:
        - semgrep
rules:
  - id: unnecessary-parent-operator
    message: Unnecessary parent operator. Remove one to fix.
    languages: [yaml]
    patterns:
      - pattern-inside: "rules: [..., $RULE, ...]"
      - pattern-either:
          - patterns:
              - pattern: |
                  pattern-either:
                  - $THING1
                  - ...
              - pattern-not: |
                  pattern-either:
                  - $THING1
                  - $THING2
                  - ...
          - patterns:
              - pattern: |
                  patterns:
                  - $THING1
                  - ...
              - pattern-not: |
                  patterns:
                  - $THING1
                  - $THING2
                  - ...
          - pattern: |
              pattern-either:
              - ...
              - pattern-either:
                - ...
    severity: WARNING
    metadata:
      category: best-practice
      technology:
        - semgrep
rules:
  - id: unsatisfiable-rule
    message: >-
      You can not use 'pattern' $A and 'pattern-not' $A together; this will always be empty.
    severity: ERROR
    languages: [yaml]
    patterns:
      - pattern-inside: "patterns: [...]"
      - pattern-either:
          - patterns:
              - pattern-inside: |
                  - pattern: $A
                  ...
              - pattern: |
                  - pattern-not: $A
          - patterns:
              - pattern-inside: |
                  - pattern-not: $A
                  ...
              - pattern: |
                  - pattern: $A
    metadata:
      category: correctness
      technology:
        - semgrep
